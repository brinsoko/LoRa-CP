openapi: 3.0.3
info:
  title: LoRa Checkpoint Backend API
  version: "1.0.0"
  description: >
    REST API for managing LoRa devices, ingesting LoRa messages,
    and automatically creating Check-ins from RFID card UIDs.

servers:
  - url: http://localhost:5001
    description: Local development
    

tags:
  - name: auth
    description: Authentication and session endpoints
  - name: checkins
    description: Manage and export check-ins
  - name: checkpoints
    description: Manage checkpoints and import from JSON
  - name: groups
    description: Manage checkpoint groups
  - name: ingest
    description: LoRa message ingest
  - name: lora
    description: LoRa devices (HTML forms)
  - name: maps
    description: Public map and JSON feeds
  - name: messages
    description: Admin message views
  - name: rfid
    description: RFID mappings and tools
  - name: teams
    description: Team management


paths:
  /login:
    post:
      summary: Authenticate user
      description: >
        Authenticates a user using form data (`username`, `password`).  
        On success, creates a login session (cookie-based).  
        On failure, re-renders login page with flash message.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  format: password
                  example: change-me-now
      responses:
        "302":
          description: Redirects to main index or `next` parameter on success
        "200":
          description: Re-rendered login form with warning flash
      tags: [auth]

  /logout:
    post:
      summary: Logout user
      security:
        - cookieAuth: []
      description: >
        Logs out the current user and clears their session.  
        Redirects to main index page.
      responses:
        "302":
          description: Redirect to index after logout
        "401":
          description: Not logged in
      tags: [auth]

  /register:
    post:
      summary: Register a new user (admin only)
      security:
        - cookieAuth: []
      description: >
        Admin-only endpoint to register a new user.  
        Creates a new user with specified username, password, and role.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [username, password, role]
              properties:
                username:
                  type: string
                  example: newuser
                password:
                  type: string
                  format: password
                  example: securepass123
                role:
                  type: string
                  enum: [public, judge, admin]
                  example: judge
      responses:
        "302":
          description: Redirect to main index on success
        "200":
          description: Rendered HTML with flash message
        "403":
          description: Forbidden (non-admin access)
      tags: [auth]

  /change_password:
    post:
      summary: Change current user's password
      security:
        - cookieAuth: []
      description: >
        Allows logged-in users to change their password after verifying
        current password and confirming new password twice.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - current_password
                - new_password
                - confirm_password
              properties:
                current_password:
                  type: string
                  format: password
                  example: oldpassword
                new_password:
                  type: string
                  format: password
                  example: newpassword123
                confirm_password:
                  type: string
                  format: password
                  example: newpassword123
      responses:
        "302":
          description: Redirect to index on success
        "200":
          description: Form re-rendered with warning flash
        "401":
          description: Not logged in
      tags: [auth]

  /create_admin:
    post:
      summary: Create a new admin user
      security:
        - cookieAuth: []
      description: >
        Admin-only endpoint. Creates a new admin user with specified
        username and password.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: superadmin
                password:
                  type: string
                  format: password
                  example: changeme123
      responses:
        "302":
          description: Redirects to login page on success
        "200":
          description: Form re-rendered with warning flash
        "403":
          description: Forbidden (non-admin access)
      tags: [auth]


  /checkins/:
    get:
      summary: List check-ins (HTML)
      description: >
        Renders the check-ins list page with optional filters and sorting.
        Query params are applied server-side and the result is an HTML page.
      parameters:
        - in: query
          name: team_id
          schema: { type: integer }
          description: Filter by Team ID.
        - in: query
          name: checkpoint_id
          schema: { type: integer }
          description: Filter by Checkpoint ID.
        - in: query
          name: date_from
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD), inclusive.
        - in: query
          name: date_to
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD), inclusive (implemented as `< end + 1 day`).
        - in: query
          name: sort
          schema:
            type: string
            enum: [new, old, team]
            default: new
          description: |
            Sort order:
              * `new` = newest first (default)
              * `old` = oldest first
              * `team` = Team name, Team number (NULLS LAST), then timestamp asc
      responses:
        "200":
          description: Rendered HTML view of check-ins.
          content:
            text/html: {}
      tags: [checkins]

  /checkins/export.csv:
    get:
      summary: Export check-ins as CSV
      description: >
        Exports the same filtered/sorted set as the list view in CSV format.
      parameters:
        - in: query
          name: team_id
          schema: { type: integer }
        - in: query
          name: checkpoint_id
          schema: { type: integer }
        - in: query
          name: date_from
          schema:
            type: string
            format: date
        - in: query
          name: date_to
          schema:
            type: string
            format: date
        - in: query
          name: sort
          schema:
            type: string
            enum: [new, old, team]
            default: new
      responses:
        "200":
          description: CSV file containing check-ins.
          headers:
            Content-Disposition:
              schema:
                type: string
              description: 'attachment; filename=checkins.csv'
          content:
            text/csv:
              schema:
                type: string
                format: binary
      tags: [checkins]

  /checkins/add:
    post:
      summary: Create a check-in
      security:
        - cookieAuth: []
      description: >
        Judge/Admin-only. Creates a new check-in for a team and checkpoint,
        unless a check-in for that pair already exists.  
        If a duplicate exists and `override=replace` is provided, it will replace.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [team_id, checkpoint_id]
              properties:
                team_id:
                  type: integer
                checkpoint_id:
                  type: integer
                timestamp:
                  type: string
                  description: Optional ISO datetime (UTC).
                  example: "2025-10-17T02:36:00"
                timestamp_local:
                  type: string
                  description: Optional local datetime to be converted using `timezone`.
                  example: "2025-10-17T04:36"
                timezone:
                  type: string
                  description: IANA timezone when using `timestamp_local`.
                  example: "Europe/Ljubljana"
                tz:
                  type: string
                  description: Alias for `timezone`.
                override:
                  type: string
                  enum: [replace]
                  description: Replace an existing team+checkpoint check-in.
      responses:
        "302":
          description: Redirect to the check-ins list on success.
        "200":
          description: Re-rendered form (e.g., validation warning or duplicate without override).
          content:
            text/html: {}
        "403":
          description: Forbidden (requires role judge or admin).
        "401":
          description: Not authenticated.
      tags: [checkins]

  /checkins/{checkin_id}/edit:
    parameters:
      - in: path
        name: checkin_id
        required: true
        schema: { type: integer }
        description: Check-in ID to edit.
    post:
      summary: Update a check-in
      security:
        - cookieAuth: []
      description: >
        Judge/Admin-only. Updates team, checkpoint, and/or timestamp.  
        If another row already exists with the same (team, checkpoint),
        you can `override=replace` to delete the duplicate and save changes.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                checkpoint_id:
                  type: integer
                timestamp:
                  type: string
                  description: Optional ISO datetime (UTC).
                timestamp_local:
                  type: string
                  description: Optional local datetime to be converted using `timezone`.
                timezone:
                  type: string
                  description: IANA timezone when using `timestamp_local`.
                tz:
                  type: string
                  description: Alias for `timezone`.
                override:
                  type: string
                  enum: [replace]
      responses:
        "302":
          description: Redirect to the check-ins list on success.
        "200":
          description: Re-rendered form (e.g., validation warning or duplicate without override).
          content:
            text/html: {}
        "404":
          description: Check-in not found.
        "403":
          description: Forbidden (requires role judge or admin).
        "401":
          description: Not authenticated.
      tags: [checkins]

  /checkins/{checkin_id}/delete:
    parameters:
      - in: path
        name: checkin_id
        required: true
        schema: { type: integer }
        description: Check-in ID to delete.
    post:
      summary: Delete a check-in
      security:
        - cookieAuth: []
      description: Judge/Admin-only. Deletes the specified check-in.
      responses:
        "302":
          description: Redirect to the check-ins list after deletion.
        "404":
          description: Check-in not found.
        "403":
          description: Forbidden (requires role judge or admin).
        "401":
          description: Not authenticated.
      tags: [checkins]

  /checkpoints/:
    get:
      summary: List checkpoints (HTML)
      description: Judge/Admin-only page listing all checkpoints.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Rendered HTML table of checkpoints.
          content:
            text/html: {}
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [checkpoints]

  /checkpoints/add:
    post:
      summary: Create checkpoint
      description: >
        Creates a new checkpoint. You may also associate an existing LoRa device
        and assign groups via repeated `group_ids` fields.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                location:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                easting:
                  type: number
                  format: float
                  nullable: true
                northing:
                  type: number
                  format: float
                  nullable: true
                lora_device_id:
                  type: integer
                  nullable: true
                group_ids:
                  description: One or more IDs (send multiple keys).
                  type: array
                  items:
                    type: integer
      responses:
        "302":
          description: Redirect to checkpoint list on success.
        "200":
          description: Validation error; re-renders HTML form.
          content:
            text/html: {}
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [checkpoints]

  /checkpoints/{cp_id}/edit:
    parameters:
      - in: path
        name: cp_id
        required: true
        schema: { type: integer }
        description: Checkpoint ID.
    post:
      summary: Update checkpoint
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                easting:
                  type: number
                  format: float
                  nullable: true
                northing:
                  type: number
                  format: float
                  nullable: true
                lora_device_id:
                  type: integer
                  nullable: true
                group_ids:
                  description: One or more IDs (send multiple keys).
                  type: array
                  items:
                    type: integer
      responses:
        "302":
          description: Redirect to checkpoint list on success.
        "200":
          description: Validation error; re-renders HTML form.
          content:
            text/html: {}
        "404":
          description: Not found.
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [checkpoints]

  /checkpoints/{cp_id}/delete:
    parameters:
      - in: path
        name: cp_id
        required: true
        schema: { type: integer }
        description: Checkpoint ID.
    post:
      summary: Delete checkpoint
      description: Admin-only. Will refuse if checkpoint has existing check-ins.
      security:
        - cookieAuth: []
      responses:
        "302":
          description: Redirect to checkpoint list (success or refused with flash).
        "404":
          description: Not found.
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role admin).
      tags: [checkpoints]

  /checkpoints/import_json:
    post:
      summary: Import checkpoints from JSON (preview or confirm)
      description: >
        Multi-step import.  
        **Preview** (default): upload a JSON file with one of the shapes:
        - Array of checkpoint objects
        - `{ "checkpoints": [ ... ] }`
        - `{ "cps": [ ... ] }`  
        **Confirm**: post `action=confirm` with a `payload` field containing the
        normalized preview JSON to upsert (create/update/skip).
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          # Preview step: file upload
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file for preview (required for preview step).
                action:
                  type: string
                  enum: [confirm]
                  description: If provided with `confirm`, ignored in this content type.
          # Confirm step: hidden payload string from preview
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [confirm]
                  description: Use `confirm` to apply changes.
                payload:
                  type: string
                  description: Normalized JSON string generated by preview step.
      responses:
        "302":
          description: >
            On **confirm** success, redirects to checkpoint list with a summary message.
        "200":
          description: >
            On **preview** or validation errors, re-renders HTML (upload or preview page).
          content:
            text/html: {}
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [checkpoints]

  /groups/:
    get:
      summary: List groups (HTML)
      description: Judge/Admin-only page listing all checkpoint groups.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Rendered HTML list of groups.
          content:
            text/html: {}
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [groups]

  /groups/add:
    post:
      summary: Create group
      description: >
        Creates a new checkpoint group. Optionally assigns checkpoints via repeated
        `checkpoint_ids` fields.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                checkpoint_ids:
                  description: One or more checkpoint IDs (send multiple keys).
                  type: array
                  items:
                    type: integer
      responses:
        "302":
          description: Redirect to groups list on success.
        "200":
          description: Validation error; re-renders HTML form.
          content:
            text/html: {}
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [groups]

  /groups/{group_id}/edit:
    parameters:
      - in: path
        name: group_id
        required: true
        schema: { type: integer }
        description: Group ID.
    post:
      summary: Update group
      description: Replaces the set of checkpoints with exactly those submitted.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                checkpoint_ids:
                  description: One or more checkpoint IDs (send multiple keys). If omitted, the group will have no checkpoints.
                  type: array
                  items:
                    type: integer
      responses:
        "302":
          description: Redirect to groups list on success.
        "200":
          description: Validation error; re-renders HTML form.
          content:
            text/html: {}
        "404":
          description: Group not found.
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [groups]

  /groups/{group_id}/delete:
    parameters:
      - in: path
        name: group_id
        required: true
        schema: { type: integer }
        description: Group ID.
    post:
      summary: Delete group
      description: >
        Admin-only. Fails with a warning if the group is active for any team.
      security:
        - cookieAuth: []
      responses:
        "302":
          description: Redirect to groups list (success or refused with flash).
        "404":
          description: Group not found.
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role admin).
      tags: [groups]

  /groups/set_active:
    post:
      summary: Set a team's active group
      description: >
        Judge/Admin action to set a single active group for a team. Deactivates any
        existing active assignment(s) for that team, then activates the specified group.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [team_id, group_id]
              properties:
                team_id:
                  type: integer
                group_id:
                  type: integer
      responses:
        "302":
          description: Redirect to groups list on success.
        "400":
          description: Validation error; redirects with flash (rendered HTML).
        "401":
          description: Not authenticated.
        "403":
          description: Forbidden (requires role judge or admin).
      tags: [groups]

  /api/ingest:
    post:
      summary: Ingest a LoRa message and (optionally) create a Check-in
      description: >
        Accepts a LoRa message from a gateway/device. Persists the raw message,
        updates the mapped `LoRaDevice` telemetry and checkpoint linkage, and if
        the payload matches a known RFID card UID, creates a `Checkin` for that
        team at the device's checkpoint (only if one does not already exist).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IngestRequest"
            examples:
              basic:
                value: { dev_id: 1, payload: "A1B2C3D4", rssi: -62.5, snr: 9.0, ts: 1730200000 }
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/IngestRequestForm"
      responses:
        "200":
          description: Ingested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngestResponse"
              examples:
                createdCheckin:
                  value:
                    ok: true
                    message_id: 123
                    dev_id: 1
                    uid_seen: true
                    team: "Wolves"
                    checkpoint: "LoRa Gateway 1"
                    checkin_created: true
                noCheckin:
                  value:
                    ok: true
                    message_id: 124
                    dev_id: 2
                    uid_seen: false
                    team: null
                    checkpoint: "LoRa Gateway 2"
                    checkin_created: false
        "400":
          description: Bad request (e.g., missing `dev_id` or `payload`)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags: [ingest]

  /lora/:
    get:
      summary: List LoRa devices (HTML)
      description: Render a table of all LoRa devices.
      tags: [lora]
      responses:
        "200":
          description: HTML page with device list.
          content:
            text/html:
              schema:
                type: string

  /lora/add:
    post:
      summary: Create a LoRa device (form post)
      description: >
        **Roles:** judge, admin  
        Creates a new `LoRaDevice`. `dev_num` is required and must be unique.
      tags: [lora]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [dev_num]
              properties:
                dev_eui:
                  type: string
                  nullable: true
                  description: Device EUI (optional here).
                dev_num:
                  type: string
                  description: Device number (unique, required).
                name:
                  type: string
                  nullable: true
                note:
                  type: string
                  nullable: true
      responses:
        "302":
          description: Redirect to device list on success or back to form on validation error.
        "403":
          description: Forbidden (insufficient role).
        "400":
          description: Bad request (validation failed).

  /lora/{device_id}/edit:
    parameters:
      - in: path
        name: device_id
        required: true
        schema:
          type: integer
        description: Primary key of the device.

    post:
      summary: Update a LoRa device (form post)
      description: >
        **Roles:** judge, admin  
        Updates device fields. `dev_eui` must be unique (and is required by this form).
      tags: [lora]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [dev_eui, dev_num]
              properties:
                dev_eui:
                  type: string
                  description: Required; must be unique (except current record).
                dev_num:
                  type: string
                  description: Device number (may be edited).
                name:
                  type: string
                  nullable: true
                note:
                  type: string
                  nullable: true
                active:
                  type: string
                  description: Checkbox-style presence indicates `true`.
      responses:
        "302":
          description: Redirect to device list on success or back to form on validation error.
        "404":
          description: Device not found.
        "403":
          description: Forbidden (insufficient role).

  /lora/{device_id}/delete:
    parameters:
      - in: path
        name: device_id
        required: true
        schema:
          type: integer
        description: Primary key of the device.
    post:
      summary: Delete a LoRa device (form post)
      description: >
        **Role:** admin  
        Unlinks the device from any checkpoint (clears `lora_device_id`) and deletes it.
      tags: [lora]
      security:
        - cookieAuth: []
      responses:
        "302":
          description: Redirect to device list.
        "404":
          description: Device not found.
        "403":
          description: Forbidden (insufficient role).

  /map/:
    get:
      summary: Map page (HTML)
      description: Public page that renders a map UI; client JS calls the JSON endpoints below. Provides a teams list to the template.
      tags: [maps]
      responses:
        "200":
          description: HTML page
          content:
            text/html:
              schema:
                type: string

  /map/api/checkpoints:
    get:
      summary: List checkpoints for map
      description: Returns minimal fields needed by the map.
      tags: [maps]
      responses:
        "200":
          description: Array of checkpoints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckpointMapItem"

  /map/api/team_found:
    get:
      summary: Checkpoints found by a team
      tags: [maps]
      parameters:
        - in: query
          name: team_id
          schema:
            type: integer
            format: int32
          required: false
          description: Team ID to query. If omitted or invalid, returns an empty list.
      responses:
        "200":
          description: List of checkpoint IDs the team has checked in at
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamFoundResponse"

  /messages/:
    get:
      summary: Admin messages page (HTML)
      description: |
        Admin-only page that lists stored LoRa messages with optional filters and pagination.
        Requires an authenticated user with the `admin` role.
      tags: [messages]
      parameters:
        - in: query
          name: dev_id
          description: Filter by device numeric ID.
          schema:
            type: integer
            format: int32
        - in: query
          name: page
          description: Page number for pagination (1-based).
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - in: query
          name: per_page
          description: Page size (max 200).
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            default: 50
      responses:
        "200":
          description: HTML page with messages list (may include pagination controls).
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Not authenticated
        "403":
          description: Forbidden (requires admin role)

  /rfid/:
    get:
      summary: List RFID mappings (HTML)
      description: |
        Renders an HTML page listing all RFID cards and their associated teams.
        Publicly accessible.
      tags: [rfid]
      responses:
        "200":
          description: HTML page with RFID mappings.
          content:
            text/html:
              schema:
                type: string

  /rfid/add:
    post:
      summary: Create a new RFID mapping
      description: Judge/admin only.
      tags: [rfid]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [uid, team_id]
              properties:
                uid:
                  type: string
                  description: RFID UID (normalized by server)
                team_id:
                  type: integer
                  format: int32
                number:
                  type: integer
                  format: int32
                  nullable: true
      responses:
        "302":
          description: Redirect to list on success (HTML)
        "200":
          description: HTML page with validation errors
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Not authenticated
        "403":
          description: Forbidden (requires judge or admin)

  /rfid/{card_id}/edit:
    parameters:
      - in: path
        name: card_id
        required: true
        schema: { type: integer, format: int32 }
    post:
      summary: Update an RFID mapping
      description: Judge/admin only.
      tags: [rfid]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [uid, team_id]
              properties:
                uid:
                  type: string
                team_id:
                  type: integer
                  format: int32
                number:
                  type: integer
                  format: int32
                  nullable: true
      responses:
        "302":
          description: Redirect to list on success (HTML)
        "200":
          description: HTML page with validation errors
          content:
            text/html:
              schema:
                type: string
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires judge or admin) }
        "404": { description: Not found }

  /rfid/{card_id}/delete:
    post:
      summary: Delete an RFID mapping
      description: Admin only.
      tags: [rfid]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: card_id
          required: true
          schema: { type: integer, format: int32 }
      responses:
        "302":
          description: Redirect to list (HTML)
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }
        "404": { description: Not found }

  /rfid/scan_once:
    post:
      summary: Read one RFID UID from serial (JSON)
      description: Judge/admin only. Attempts a single UID read from configured serial device.
      tags: [rfid]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Result of scan
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      ok:
                        type: boolean
                        enum: [true]
                      uid:
                        type: string
                    required: [ok, uid]
                    additionalProperties: false
                  - type: object
                    properties:
                      ok:
                        type: boolean
                        enum: [false]
                      error:
                        type: string
                    required: [ok, error]
                    additionalProperties: false
        "401":
          description: Not authenticated
        "403":
          description: Forbidden (requires judge or admin)

  /rfid/upload_csv:
    post:
      summary: Process RFID CSV upload
      description: |
        Admin only. Accepts a CSV file with columns such as:
        `uid`, `team_id` OR (`team_name` [+ optional `team_number`]), and optional `number`.
        Performs upserts; flashes a summary; redirects back to list.
      tags: [rfid]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "302":
          description: Redirect to list (HTML), with flash messages on success/errors.
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }

  
  /teams/:
    get:
      summary: List teams (HTML)
      description: |
        Renders an HTML page showing teams with optional search, group filter, and sorting.
        Publicly accessible view.
      tags: [teams]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Search string (supports * wildcards)
        - in: query
          name: group_id
          schema: { type: integer, format: int32 }
          description: Filter by checkpoint group id
        - in: query
          name: sort
          schema:
            type: string
            enum: [name_asc, name_desc, number_asc, number_desc]
            default: name_asc
          description: Sort order
      responses:
        "200":
          description: HTML page with teams list
          content:
            text/html:
              schema:
                type: string

  /teams/add:

    post:
      summary: Create a team
      description: Judge/admin only. Creates a team and assigns selected checkpoint groups active.
      tags: [teams]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                number:
                  type: integer
                  format: int32
                  nullable: true
                group_ids:
                  type: array
                  items:
                    type: integer
                    format: int32
                  description: One or more checkpoint group IDs (checkbox values)
      responses:
        "302":
          description: Redirect to teams list on success (HTML)
        "200":
          description: HTML page with validation errors
          content:
            text/html:
              schema: { type: string }
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires judge or admin) }

  /teams/{team_id}/edit:
    parameters:
      - in: path
        name: team_id
        required: true
        schema: { type: integer, format: int32 }
    post:
      summary: Update a team
      description: Judge/admin only. Updates name/number and replaces group assignments with selected set.
      tags: [teams]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                number:
                  type: integer
                  format: int32
                  nullable: true
                group_ids:
                  type: array
                  items:
                    type: integer
                    format: int32
                  description: Complete set of group IDs to keep assigned
      responses:
        "302":
          description: Redirect to teams list on success (HTML)
        "200":
          description: HTML page with validation errors
          content:
            text/html:
              schema: { type: string }
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires judge or admin) }
        "404": { description: Not found }

  /teams/{team_id}/delete:
    post:
      summary: Delete a team
      description: Admin only. Fails if team has existing check-ins.
      tags: [teams]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: team_id
          required: true
          schema: { type: integer, format: int32 }
      responses:
        "302":
          description: Redirect to teams list (HTML)
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }
        "404": { description: Not found }

  /users/:
    get:
      tags: [users]
      summary: List users (HTML)
      description: Admin-only page listing all users.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Rendered HTML table of users.
          content:
            text/html: { schema: { type: string } }
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }
        

  /users/add:
    post:
      tags: [users]
      summary: Create a user
      description: |
        Admin-only. Creates a user with a role. Password must be ≥ 8 characters
        and should not contain the username (server enforces).
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserFormCreate"
      responses:
        "302":
          description: Redirect to users list on success (or back to form on validation error).
        "200":
          description: HTML with validation errors (re-rendered form).
          content:
            text/html: { schema: { type: string } }
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }

  /users/{user_id}/edit:
    parameters:
      - in: path
        name: user_id
        required: true
        schema: { type: integer, format: int32 }
        description: User ID to edit.
    post:
      tags: [users]
      summary: Update a user
      description: |
        Admin-only. Updates username and role.  
        If `new_password` and `confirm_password` are provided, password is reset (≥ 8 chars, must match, must not contain username).
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserFormUpdate"
      responses:
        "302":
          description: Redirect to users list on success (or back to form on validation error).
        "200":
          description: HTML with validation errors (re-rendered form).
          content:
            text/html: { schema: { type: string } }
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }
        "404": { description: Not found }

  /users/{user_id}/delete:
    parameters:
      - in: path
        name: user_id
        required: true
        schema: { type: integer, format: int32 }
        description: User ID to delete.
    post:
      tags: [users]
      summary: Delete a user
      description: Admin-only. Permanently deletes the user.
      security:
        - cookieAuth: []
      responses:
        "302":
          description: Redirect to users list after deletion (or refusal).
        "401": { description: Not authenticated }
        "403": { description: Forbidden (requires admin) }
        "404": { description: Not found }



components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
      description: >
        Flask-Login session cookie.  
        Used for all authenticated routes.
  


  schemas:
    IngestRequest:
      type: object
      required: [dev_id, payload]
      properties:
        dev_id:
          type: integer
          description: Numeric identifier of the LoRa device/gateway.
        payload:
          type: string
          description: Payload string (expected to be RFID UID in this app).
        rssi:
          type: number
          format: float
          nullable: true
          description: Received signal strength (dBm).
        snr:
          type: number
          format: float
          nullable: true
          description: Signal-to-noise ratio (dB).
        ts:
          type: integer
          format: int64
          nullable: true
          description: Unix timestamp (seconds) when message originated; if omitted, server uses current UTC.
    IngestRequestForm:
      type: object
      required: [dev_id, payload]
      properties:
        dev_id:
          type: integer
        payload:
          type: string
        rssi:
          type: number
          format: float
          nullable: true
        snr:
          type: number
          format: float
          nullable: true
        ts:
          type: integer
          format: int64
          nullable: true
    IngestResponse:
      type: object
      properties:
        ok:
          type: boolean
        message_id:
          type: integer
          description: Primary key of the stored `LoRaMessage`.
        dev_id:
          type: integer
        uid_seen:
          type: boolean
          description: Whether `payload` matched a known RFID card UID.
        team:
          type: string
          nullable: true
          description: Team name if UID matched.
        checkpoint:
          type: string
          nullable: true
          description: Resolved checkpoint name for the device.
        checkin_created:
          type: boolean
          description: True if a new `Checkin` row was inserted.

    CheckpointMapItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 12
        name:
          type: string
          example: "CP-01"
        easting:
          type: number
          format: float
          nullable: true
          example: 12345.67
        northing:
          type: number
          format: float
          nullable: true
          example: 7654.32
      required: [id, name]

    TeamFoundResponse:
      type: object
      properties:
        found:
            type: array
            items:
              type: integer
              format: int32
            example: [1, 5, 9]
            
    Error:
      type: object
      properties:
        message:
          type: string
  
    UserFormCreate:
      type: object
      required: [username, password, role]
      properties:
        username:
          type: string
          example: alice
        password:
          type: string
          format: password
          example: securepass123
          description: "≥ 8 chars; should not contain the username."
        role:
          type: string
          enum: [public, judge, admin]
          example: judge

    UserFormUpdate:
      type: object
      required: [username, role]
      properties:
        username:
          type: string
          example: alice
        role:
          type: string
          enum: [public, judge, admin]
          example: admin
        new_password:
          type: string
          format: password
          nullable: true
          description: "Optional; if provided, must be ≥ 8 chars and not contain username."
        confirm_password:
          type: string
          format: password
          nullable: true
          description: "Must match new_password when resetting."
  